import React from 'react';
import type {PropsWithChildren} from 'react';
import RegisterPage from './RegisterPage';
import {
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native';

import {
  Colors,
  DebugInstructions,
  Header,
  LearnMoreLinks,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';

type SectionProps = PropsWithChildren<{
  title: string;
}>;

function Section({children, title}: SectionProps): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';
  return (
    <View style={styles.sectionContainer}>
      <Text
        style={[
          styles.sectionTitle,
          {
            color: isDarkMode ? Colors.white : Colors.black,
          },
        ]}>
        {title}
      </Text>
      <Text
        style={[
          styles.sectionDescription,
          {
            color: isDarkMode ? Colors.light : Colors.dark,
          },
        ]}>
        {children}
      </Text>
    </View>
  );
}

function App(): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';

  const backgroundStyle = {
    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,
  };

  return (
    <SafeAreaView style={backgroundStyle}>
      <StatusBar
        barStyle={isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={backgroundStyle.backgroundColor}
      />


      <ScrollView
        contentInsetAdjustmentBehavior="automatic"
        style={backgroundStyle}>
        <Header />
        <View
          style={{
            backgroundColor: isDarkMode ? Colors.black : Colors.white,
          }}>

          <RegisterPage/>
          <Section title="Step One">
            Edit <Text style={styles.highlight}>App.tsx</Text> to change this
            screen and then come back to see your edits.
          </Section>
          <Section title="See Your Changes">
            <ReloadInstructions />
          </Section>
          <Section title="Debug">
            <DebugInstructions />
          </Section>
          <Section title="Learn More">
            Read the docs to discover what to do next:
          </Section>
          <LearnMoreLinks />
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  highlight: {
    fontWeight: '700',
  },
});

export default App;



main page code 

<ScrollView>
        
        <Appbar.Header elevated={true}>
            <Appbar.BackAction onPress={() => { }} />
            <Appbar.Content title="Home" />
            <Appbar.Action icon="calendar" onPress={() => { }} />
            <Appbar.Action icon="magnify" onPress={() => { }} />
        </Appbar.Header>

        <DrawerUI/>
        <CardUI/>
        <BannerUI/>
        {/* <Appbar
            style={[
                styles.bottom,
                {
                    height: BOTTOM_APPBAR_HEIGHT + bottom,
                    backgroundColor: theme.colors.elevation.level2,
                },
            ]}
            safeAreaInsets={{ bottom }}
        >
            <Appbar.Action icon="archive"  onPress={() => { }} />
            <Appbar.Action icon="email" onPress={() => { }} />
            <Appbar.Action icon="label" onPress={() => { }} />
            <Appbar.Action icon="delete" onPress={() => { }} />
            <FAB
                mode="flat"
                size="medium"
                icon="plus"
                onPress={() => { }}
                style={[
                    styles.fab,
                    { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },
                ]}
            />
        </Appbar> */}
        <BottomNavigationUI/>
        </ScrollView>

ANIMATION PAGE 
import React, { useRef } from "react";
import { Animated, Button, SafeAreaView, StyleSheet, View } from "react-native";
import { Text } from "react-native-paper";


const AnimationPage = ({navigation}) =>{

    const fadeAnim = useRef(new Animated.Value(0)).current;

    const fadeIn=()=>{

        Animated.timing(fadeAnim, {
            toValue: 1,
            duration:3000,
            useNativeDriver: true,
        }).start();
    };

    const fadeOut=()=>{
        Animated.timing(fadeAnim, {
            toValue: 0,
            duration: 3000,
            useNativeDriver: true,
        }).start();
    };

    return(
        <SafeAreaView style={styles.container}> 
        <Animated.View
            style={[
                styles.fadingContainer, { opacity: fadeAnim},
            ]}>
                <Text style={styles.fadingText}>Fading View </Text>
        </Animated.View>
        <View style={styles.buttonRow}>
            <Button title="Fade in View " onPress={fadeIn}/> 
            <Button title="Fade out View " onPress={fadeOut}/> 
        </View>

        <Button
                onPress={() => navigation.goBack()}
                title="Go Back"
                color="maroon"
            />
        </SafeAreaView>
        );
};
export default AnimationPage;

const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
    },
    fadingContainer: {
      padding: 20,
      backgroundColor: 'teal',
    },
    fadingText: {
      fontSize: 28,
    },
    buttonRow: {
      flexBasis: 100,
      justifyContent: 'space-evenly',
      marginVertical: 16,
    },
  });




  // Sliding Image Animated
  <View style={styles.scrollContainer}>
                <ScrollView
                    horizontal={true}
                    pagingEnabled
                    showsHorizontalScrollIndicator={false}
                    onScroll={Animated.event([
                        {
                            nativeEvent: {
                                contentOffset: {
                                    x: scrollX,
                                },
                            },
                        },
                    ])}
                    scrollEventThrottle={1}>

                    <View style={styles.box} />
                    {images.map((image, imageIndex) => {
                        return (
                            <View style={{ width: windowWidth, height: 250 }} key={imageIndex}>



                                <ImageBackground source={{ uri: image }} style={styles.card}>
                                    <View style={styles.textContainer}>
                                        <Text style={styles.infoText}>
                                            {'Image - ' + imageIndex}
                                        </Text>
                                    </View>
                                </ImageBackground>

                            </View>
                        );
                    })}
                </ScrollView>
                <View style={styles.indicatorContainer}>
                    {images.map((image, imageIndex) => {
                        const width = scrollX.interpolate({
                            inputRange: [
                                windowWidth * (imageIndex - 1),
                                windowWidth * imageIndex,
                                windowWidth * (imageIndex + 1),
                            ],
                            outputRange: [8, 16, 8],
                            extrapolate: 'clamp',
                        });
                        return (
                            <Animated.View
                                key={imageIndex}
                                style={[styles.normalDot, { width }]}
                            />
                        );
                    })}
                </View>


                <View>
                <Animated.View
                    style={[
                        styles.fadingContainer, { opacity: fadeAnim },
                    ]}>
                    <Text style={styles.fadingText}>Fading View </Text>
                </Animated.View>
                <View style={styles.buttonRow}>
                    <Button title="Fade in View " onPress={fadeIn} />
                    <Button title="Fade out View " onPress={fadeOut} />
                </View>
    </View>
                <Button
                    onPress={() => navigation.goBack()}
                    title="Go Back"
                    color="maroon"
                />
            </View>




            {
    "data": [
        {
            "id": "73",
            "description": "Yellow traditional dress ",
            "count": "5",
            "price": "500",
            "image": "https://dhvijacoutur.alakmalak.ca/image/cache/catalog/20220630170151828-200x200.png",
            "parent": "0"
        },
        {
            "id": "102",
            "description": "",
            "count": "4",
            "price": "",
            "image": "",
            "parent": "73"
        }
    ]
}




db-service.ts 


import { SQLiteDatabase, enablePromise, openDatabase } from 'react-native-sqlite-storage';
import { ToDoItem } from '../models';

// enablePromise(true);

const tableName = 'TodoData';

export const getDBConnection = async () => {
    return openDatabase({ name: 'todo-data.db', location: 'default' });
};

export const createTable = async (db: SQLiteDatabase) => {
    console.log("in if")
    const query = `CREATE TABLE IF NOT EXISTS ${tableName}(
        value TEXT NOT NULL
    );`;
    console.log("in if 2")
    await db.executeSql(query);
    console.log("in if 3")
};

export const getTodoItems = async (db: SQLiteDatabase): Promise<ToDoItem[]> => {
    try {
        const todoItems: ToDoItem[] = [];
        const results = await db.executeSql(`SELECT rowid as id,value FROM ${tableName}`);
        results.forEach(result => {
            for (let index = 0; index < result.rows.length; index++) {
                todoItems.push(result.rows.item(index));
            }
        });
        return todoItems;
    } catch (error) {

        console.error(error);
        throw Error('Failed to get todoItems !!!');

    }
};

export const saveTodoItems = async (db: SQLiteDatabase, todoItems: ToDoItem[]) => {
    const insertQuery =
        `INSERT OR REPLACE INTO ${tableName}(rowid, value) values` +
        todoItems.map(i => `(${i.id}, '${i.value}')`).join(',');

    return db.executeSql(insertQuery);
};

export const deleteTodoItem = async (db: SQLiteDatabase, id: number) => {
    const deleteQuery = `DELETE from ${tableName} where rowid = ${id}`;
    console.log(deleteQuery);
    await db.executeSql(deleteQuery);
};

export const deleteTable = async (db: SQLiteDatabase) => {
    const query = `drop table ${tableName}`;

    await db.executeSql(query);
};

npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ && cd android && ./gradlew assembleDebug && cd ..
